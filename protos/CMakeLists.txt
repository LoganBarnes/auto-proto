cmake_minimum_required(VERSION 3.12)

find_package(Protobuf REQUIRED)
find_package(gRPC REQUIRED)

# Generates C++ sources from the .proto files
#
# grpc_generate_cpp (<SRCS> <HDRS> <DEST> [<ARGN>...])
#
#  SRCS - variable to define with autogenerated source files
#  HDRS - variable to define with autogenerated header files
#  DEST - directory where the source files will be created
#  ARGN - .proto files
function(GRPC_GENERATE_CPP SRCS HDRS SRC_DIR DEST_DIR)
    if (NOT ARGN)
        message(SEND_ERROR "Error: GRPC_GENERATE_CPP() called without any proto files")
        return()
    endif ()

    if (DEFINED PROTOBUF_IMPORT_DIRS)
        foreach (DIR ${PROTOBUF_IMPORT_DIRS})
            get_filename_component(ABS_PATH ${DIR} ABSOLUTE)
            list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
            if (${_contains_already} EQUAL -1)
                list(APPEND _protobuf_include_path -I ${ABS_PATH})
            endif ()
        endforeach ()
    endif ()

    set(${SRCS})
    set(${HDRS})
    set(ABS_PROTOS "")

    get_target_property(GRPC_CPP_PLUGIN gRPC::grpc_cpp_plugin LOCATION)
    foreach (PROTO_FILE ${ARGN})
        get_filename_component(ABS_FILE ${PROTO_FILE} ABSOLUTE)

        # maintain the relative directory structure
        file(RELATIVE_PATH REL_FILE ${SRC_DIR} ${PROTO_FILE})
        get_filename_component(FILE ${REL_FILE} NAME_WE)
        get_filename_component(DIR ${REL_FILE} DIRECTORY)

        list(APPEND ${SRCS} "${DEST_DIR}/${DIR}/${FILE}.pb.cc")
        list(APPEND ${HDRS} "${DEST_DIR}/${DIR}/${FILE}.pb.h")
        list(APPEND ${SRCS} "${DEST_DIR}/${DIR}/${FILE}.grpc.pb.cc")
        list(APPEND ${HDRS} "${DEST_DIR}/${DIR}/${FILE}.grpc.pb.h")

        list(APPEND ABS_PROTOS ${ABS_FILE})
    endforeach ()

    add_custom_command(
            OUTPUT
            ${${SRCS}}
            ${${HDRS}}
            COMMAND protobuf::protoc
            ARGS --cpp_out ${DEST_DIR} --grpc_out ${DEST_DIR}
            ${_protobuf_include_path}
            --plugin=protoc-gen-grpc=${GRPC_CPP_PLUGIN}
            ${ABS_PROTOS}
            DEPENDS ${SRC_DIR} ${ABS_PROTOS} protobuf::protoc gRPC::grpc_cpp_plugin
            COMMENT "Running C++ gRPC compiler"
            VERBATIM
    )

    set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)
    set(${SRCS} ${${SRCS}} PARENT_SCOPE)
    set(${HDRS} ${${HDRS}} PARENT_SCOPE)
endfunction()

# gather proto files
file(GLOB_RECURSE PROTO_FILES LIST_DIRECTORIES false CONFIGURE_DEPENDS "*.proto")

# search directory for protobuf
set(PROTOBUF_IMPORT_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/proto)

# make an output directory
set(PROTO_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/proto)
set(PROTO_DST_DIR ${CMAKE_CURRENT_BINARY_DIR}/proto)
file(MAKE_DIRECTORY ${PROTO_DST_DIR})

# generate service objects
grpc_generate_cpp(GRPC_SRCS GRPC_HDRS ${PROTO_SRC_DIR} ${PROTO_DST_DIR} ${PROTO_FILES})

add_library(proj_proto
        ${GRPC_HDRS}
        ${GRPC_SRCS}
        thirdparty_src/proto_reflection_descriptor_database
        )
target_link_libraries(proj_proto
        PUBLIC gRPC::grpc++
        PUBLIC protobuf::libprotobuf
        )
target_include_directories(proj_proto SYSTEM
        PUBLIC ${PROTO_DST_DIR}
        PUBLIC thirdparty_src
        )
